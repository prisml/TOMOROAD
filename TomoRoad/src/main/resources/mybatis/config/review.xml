<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">
	<resultMap type="reviewVO" id="reviewRM">
		<result property="postedTime" column="posted_time" />
		<result property="place.no" column="place_no" />
		<result property="member.id" column="member_id" />
	</resultMap>
	<resultMap type="reviewVO" id="detailReviewRM" extends="reviewRM">
		<result column="place_name" property="place.name" />
		<result column="member_name" property="member.name" />
		<result column="station_name" property="place.station_name" />
	</resultMap>
	<select id="detail" resultMap="detailReviewRM">
		select
		r.no,r.title,r.content,to_char(posted_time,'YYYY/MM/DD HH24:MM') as posted_time,r.star,r.place_no,r.member_id,r.hits,p.name place_name, m.name member_name
		from review r, place p, member m where
		r.no=#{value} and r.place_no=p.no and m.id=r.member_id
	</select>
	<select id="getTotalContents" resultType="int">
		select count(*) from
		review
	</select>
	<select id="getList" resultType="reviewVO" resultMap="detailReviewRM"
		parameterType="pagingBean">
		select A.*, re.recommend
		from(select row_number() over(order by r.no
		desc) rnum,
		r.no, r.title, r.member_id, r.place_no, p.name, r.hits, r.content, m.name member_name, p.name place_name,
		to_char(posted_time,'YYYY/MM/DD HH24:MM') as posted_time
		from review r, place p, member m where r.place_no = p.no and r.member_id=m.id) A, 
		(select count(*) recommend,review_no from REVIEW_RECOMMEND group by review_no) re
		where rnum between #{startRowNumber} and #{endRowNumber} and A.no=re.review_no(+)
	</select>
	<insert id="register" parameterType="reviewVO">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select
			review_seq.nextval from dual
		</selectKey>
		insert into
		review(no,title,content,posted_time,star,place_no,member_id)
		values(#{no},#{title},#{content},sysdate,#{star},#{place.no},#{member.id})
	</insert>
	<update id="update" parameterType="reviewVO">
		update review set
		title=#{title}, content=#{content}, star=#{star}, place_no=#{place.no}
		where no=#{no}
	</update>

	<!-- 제목에 따른 검색결과 리턴 -->
	<select id="getTitle" resultType="reviewVO" resultMap="reviewRM">
		select
		no,title,content,member_id,to_char(posted_time,'YYYY.MM.DD')
		postedTime,hits
		from review
		where title like '%' || #{value} || '%'
	</select>

	<!-- 제목+내용에 따른 검색결과 리턴 -->
	<select id="getTitleAndContent" resultType="reviewVO" resultMap="reviewRM">
		select no,title,content,member_id,to_char(posted_time,'YYYY.MM.DD')
		postedTime,hits
		from review
		where title like '%' || #{value} || '%' or
		content like '%' || #{value} || '%'
	</select>


	<update id="updateHits">
		update review set hits=hits+1 where no=#{value}
	</update>
	<select id="getListByMember" resultType="reviewVO" resultMap="reviewRM">
		select A.*
		from(select row_number() over(order by r.no desc) rnum,
		r.no, r.title, r.member_id, r.place_no, p.name, r.hits,
		to_char(posted_time,'YYYY/MM/DD HH24:MM') as posted_time
		from review r, place p where r.place_no = p.no) A
		where rnum between #{startRowNumber} and #{endRowNumber} and member_id={id}
	</select>
	<select id="getListByPlace" resultType="reviewVO" resultMap="reviewRM">
		select A.*
		from(select row_number() over(order by r.no desc) rnum,
		r.no, r.title, r.member_id, r.place_no, p.name, r.hits,
		to_char(posted_time,'YYYY/MM/DD HH24:MM') as posted_time
		from review r, place p where r.place_no = p.no) A
		where rnum between #{startRowNumber} and #{endRowNumber} and
		place_no={place}
	</select>
	<delete id="delete">
		delete from review where no=#{no}
	</delete>
	<insert id="recommend" parameterType="map">
		insert into
		review_recommend values(#{member_id},#{review_no})
	</insert>

	<select id="getRecommendByNo" resultType="int">
		select count(*) from review_recommend where review_no = #{value}
	</select>
	
	<select id="isRecommend" resultType="map" parameterType="map">
		select member_id, review_no from review_recommend where member_id=#{member_id} and review_no=#{review_no}
	</select>
	
	<delete id="deleteRecommend" parameterType="map">
		delete from review_recommend where member_id=#{member_id} and review_no=#{review_no}
	</delete>
	
<!-- 특정 관광지에 해당하는 리뷰들을 모아서 보여준다.
	<select id="getReviewListByPlace">
		select no,title,postedTim 이거아직 해야돼!!
	</select> -->
</mapper>